this_trial_num_before <- NULL
trial_before_df <- NULL
trial_num_before <- NULL
# Isolate participants' response times.
# Include rows when the participant responded to the stimulus preceding the target (i.e. any time that the participant pressed the button within one stimulus before the target)
for(i in 1:nrow(structured_lv_targets))
{
# Isolate the ID number
this_id <- structured_lv_targets[i,]$part_id
id <- append(id, paste(this_id))
# Isolate the trial number
this_trial_num <- structured_lv_targets[i,]$trialnum
trial <- append(trial, paste(this_trial_num))
# Isolate the target's rt
this_targ_rt <- structured_lv_targets[i,]$l_block_trial_key_resp.rt
target_rt <- append(target_rt, paste(this_targ_rt))
# Isolate the loop value
this_loop <- structured_lv_targets[i,]$l_block_trial_loop.thistrialn
loop <- append (loop, this_loop)
# Isolate the row with the preceding trial for that participant
this_trial_before <- structured_lv[which(structured_lv$trialnum==this_trial_num-1 & structured_lv$part_id==this_id), ][1,]
trial_before_df <- rbind (this_trial_before, this_trial_before)
this_trial_num_before <- this_trial_before$trialnum
trial_num_before <- append (trial_num_before, this_trial_num_before)
# Isolate the preceding row's this_l_loop value.
preceding_loop <- this_trial_before$l_block_trial_loop.thistrialn
loop_before <- append(loop_before, preceding_loop)
#loop_after <- append (loop_after, folvowing_loop)
preceding_rt <- this_trial_before$l_block_trial_key_resp.rt
rt_before <- append (rt_before, preceding_rt)
# If the participant responded while the target was presented
if (!is.na(structured_lv_targets[i,] [,"l_block_trial_key_resp.rt"])){
# Count their response time from the target stimulus
rt_col <- append (rt_col, structured_lv_targets[i,][,"l_block_trial_key_resp.rt"])
}
# If the participant responded during the stimulus preceding the target (implies that we are not in the first row, which would not have a preceding row)
else if (!is.na(this_trial_before["l_block_trial_key_resp.rt"])){
# And the preceding line is from the same block
if (preceding_loop==this_loop-1){
# Take the rt from the preceding line and subtract it from 0, to determine how far in advance they responded
rt_col <- append (rt_col, 0-(1000-preceding_rt))
case <- append (case, "case 2")}
else {
# Copy the target response time of NA
rt_col <- append (rt_col, this_targ_rt)
case <- append (case, "case 3")}
}
# If the participant did not respond within 1 stimulus preceding the target,
else if (is.na(structured_lv_targets[i,] [,"l_block_trial_key_resp.rt"])){
# Copy their response time of NA
rt_col <- append (rt_col, this_targ_rt)
case <- append (case, "case 4")}
else{
rt_col <- append (rt_col, "anomaly, this shouldn't happen")
case <- append (case, "case 5")}
}
# Match id and response times
structured_lv_extracted <- data.frame(id, trial, trial_num_before, loop, loop_before, target_rt, rt_before, rt_col)
# Reindex the trial numbers for only trials with response times -----------------------------------------------------------------------------------------------------
# List unique participant IDs for this condition
extracted_part_id <- unique(structured_lv_extracted$id)
# Find the number of targets shown to each participant
target_sum <- NULL
for(i in extracted_part_id){target_sum <- append(target_sum,sum(structured_lv_extracted$id==i))}
# TEST: This should be equal to 26
length (target_sum)
# TEST: This should contain a vector full of 24s
target_sum
# For each participant, index the targets
targ_index <- NULL
for (i in target_sum) {targ_index <- append (targ_index, rep(1:i, 1))}
# Add the targets' indices
structured_lv_extracted$targ_index <- targ_index
# Remove any values of NA
structured_lv_extracted <- structured_lv_extracted[!is.na(structured_lv_extracted$rt_col),]
# Calculate mean rt and rt_slope  -----------------------------------------------------------------------------------------------------
# Define variables
mean_rt <- NULL
rt_slope <- NULL
part_id <- NULL
type <- NULL
task<- NULL
same_or_diff <- NULL
test_phase <- NULL
slv<- NULL
domain <- NULL
range <- NULL
upper_bound <- NULL
lower_bound <- NULL
this_range <- NULL
# For each participant, extract id
# Assign domain and type
# Calculate and record mean_rt, rt_slope, upper bound, and lower bound
for(id in extracted_part_id){
part_id <- append(part_id, id)
domain <- append(domain, "linguistic")
task <- append(task, "lv")
type <- append (type, "structured")
same_or_diff <- append (same_or_diff, "different")
test_phase <- append (test_phase, "lsl")
mean_rt <- append(mean_rt, round(mean(structured_lv_extracted$rt_col[structured_lv_extracted$id==id]),digits=3))
rt_slope <- append (rt_slope, round(summary(lm(structured_lv_extracted$rt_col[structured_lv_extracted$id==id]~structured_lv_extracted$targ_index[structured_lv_extracted$id==id]))$coefficient[2,1],digits = 4))
data_this_id <- (structured_lv_extracted[ which(structured_lv_extracted$id==id),])
this_range<- range(data_this_id$rt_col, na.rm = TRUE)
range <- append (range, (this_range[2]-this_range[1]))
upper_bound <- append (upper_bound,this_range[1])
lower_bound <- append (lower_bound,this_range[2])
}
# Combine data for each participant
slv <- data.frame(part_id, task, same_or_diff, test_phase, domain,type,mean_rt, range, upper_bound, lower_bound, rt_slope)
# TEST: find mean rt_slope
mean_slv_rt_slope <- mean (slv$rt_slope)
# It should be negative
mean_slv_rt_slope
# ******************** CONDITION 7: vl structured*******************
# Separate structured and structured conditions
structured_vl <- vl_data_frame[ which(vl_data_frame$condition== "S"),]
# Identify the rows when this condition's target was presented
structured_vl_targets <- structured_vl[which(structured_vl$structured_targ==structured_vl$image),]
## Index the images by structured/ structured-----------------------------------------------
# TEST: Create a data frame to check the number of lines per participant
list_part_id <- unique(structured_vl_targets$part_id)
part_id <- NULL
total_lines <- NULL
for(id in list_part_id){
part_id <- append(part_id, id)
total_lines <- append(total_lines, nrow(structured_vl_targets[which(structured_vl$part_id==id),]))
}
svl_line_number <- data.frame(part_id, total_lines)
# There should be 26 entries
length(svl_line_number$part_id)
# They should all contain 288 lines
svl_line_number$total_lines
# Identify response times to target stimuli. Include times when participant responded while target was displayed, or during preceding/ fovlowing stimulus ---------------------------------------------
# Set up variables to loop through participants by trials and track the target
rt_col <- NULL
target_rt <- NULL
preceding_rt <- NULL
id <- NULL
trial <-NULL
this_id <- NULL
this_trial_num <- NULL
this_loop <- NULL
loop <- NULL
preceding_loop <- NULL
loop_before <- NULL
this_targ_rt <- NULL
rt_before <- NULL
case <- NULL
this_trial_before <- NULL
this_trial_num_before <- NULL
trial_before_df <- NULL
trial_num_before <- NULL
# Identify the rows when this condition's target was presented
structured_vl_targets <- structured_vl[which(structured_vl$structured_targ==structured_vl$image),]
# Isolate participants' response times.
# Include rows when the participant responded to the stimulus preceding the target (i.e. any time that the participant pressed the button within one stimulus before the target)
for(i in 1:nrow(structured_vl_targets))
{
# Isolate the ID number
this_id <- structured_vl_targets[i,]$part_id
id <- append(id, paste(this_id))
# Isolate the trial number
this_trial_num <- structured_vl_targets[i,]$trial_num
trial <- append(trial, paste(this_trial_num))
# Isolate the target's rt
this_targ_rt <- structured_vl_targets[i,]$v_block_trial_key_resp.rt
target_rt <- append(target_rt, paste(this_targ_rt))
# Isolate the loop value
this_loop <- structured_vl_targets[i,]$v_block_trials.thistrialn
loop <- append (loop, this_loop)
# Isolate the row with the preceding trial for that participant
this_trial_before <- structured_vl[which(structured_vl$trial_num==this_trial_num-1 & structured_vl$part_id==this_id), ][1,]
trial_before_df <- rbind (this_trial_before, this_trial_before)
this_trial_num_before <- this_trial_before$trial_num
trial_num_before <- append (trial_num_before, this_trial_num_before)
# Isolate the preceding row's this_v_loop value.
preceding_loop <- this_trial_before$v_block_trials.thistrialn
loop_before <- append(loop_before, preceding_loop)
#loop_after <- append (loop_after, fovlowing_loop)
preceding_rt <- this_trial_before$v_block_trial_key_resp.rt
rt_before <- append (rt_before, preceding_rt)
# If the participant responded while the target was presented
if (!is.na(structured_vl_targets[i,] [,"v_block_trial_key_resp.rt"])){
# Count their response time from the target stimulus
rt_col <- append (rt_col, structured_vl_targets[i,][,"v_block_trial_key_resp.rt"])
}
# If the participant responded during the stimulus preceding the target (implies that we are not in the first row, which would not have a preceding row)
else if (!is.na(this_trial_before["v_block_trial_key_resp.rt"])){
# And the preceding line is from the same block
if (preceding_loop==this_loop-1){
# Take the rt from the preceding line and subtract it from 0, to determine how far in advance they responded
rt_col <- append (rt_col, 0-(1000-preceding_rt))
case <- append (case, "case 2")}
else {
# Copy the target response time of NA
rt_col <- append (rt_col, this_targ_rt)
case <- append (case, "case 3")}
}
# If the participant did not respond within 1 stimulus preceding the target,
else if (is.na(structured_vl_targets[i,] [,"v_block_trial_key_resp.rt"])){
# Copy their response time of NA
rt_col <- append (rt_col, this_targ_rt)
case <- append (case, "case 4")}
else{
rt_col <- append (rt_col, "anomaly, this shouldn't happen")
case <- append (case, "case 5")}
}
# Match id and response times
structured_vl_extracted <- data.frame(id, trial, trial_num_before, loop, loop_before, target_rt, rt_before, rt_col)
# Reindex the trial numbers for only trials with response times -----------------------------------------------------------------------------------------------------
# List unique participant IDs for this condition
extracted_part_id <- unique(structured_vl_extracted$id)
# Find the number of targets shown to each participant
target_sum <- NULL
for(i in extracted_part_id){target_sum <- append(target_sum,sum(structured_vl_extracted$id==i))}
# TEST: This should be equal to 26
length (target_sum)
# TEST: This should contain a vector full of 24s
target_sum
# For each participant, index the targets
targ_index <- NULL
for (i in target_sum) {targ_index <- append (targ_index, rep(1:i, 1))}
# Add the targets' indices
structured_vl_extracted$targ_index <- targ_index
# Remove any values of NA
structured_vl_extracted <- structured_vl_extracted[!is.na(structured_vl_extracted$rt_col),]
# Calculate mean rt and rt_slope  -----------------------------------------------------------------------------------------------------
# Define variables
mean_rt <- NULL
rt_slope <- NULL
part_id <- NULL
type <- NULL
task<- NULL
same_or_diff <- NULL
test_phase <- NULL
svl<- NULL
domain <- NULL
range <- NULL
upper_bound <- NULL
lower_bound <- NULL
this_range <- NULL
# For each participant, extract id
# Assign domain and type
# Calculate and record mean_rt, rt_slope, upper bound, and lower bound
for(id in extracted_part_id){
part_id <- append(part_id, id)
domain <- append(domain, "linguistic")
task <- append(task, "vl")
type <- append (type, "structured")
same_or_diff <- append (same_or_diff, "different")
test_phase <- append (test_phase, "vsl")
mean_rt <- append(mean_rt, round(mean(structured_vl_extracted$rt_col[structured_vl_extracted$id==id]),digits=3))
rt_slope <- append (rt_slope, round(summary(lm(structured_vl_extracted$rt_col[structured_vl_extracted$id==id]~structured_vl_extracted$targ_index[structured_vl_extracted$id==id]))$coefficient[2,1],digits = 4))
data_this_id <- (structured_vl_extracted[ which(structured_vl_extracted$id==id),])
this_range<- range(data_this_id$rt_col, na.rm = TRUE)
range <- append (range, (this_range[2]-this_range[1]))
upper_bound <- append (upper_bound,this_range[1])
lower_bound <- append (lower_bound,this_range[2])
}
# Combine data for each participant
svl <- data.frame(part_id, task, same_or_diff, test_phase, domain,type,mean_rt, range, upper_bound, lower_bound, rt_slope)
# for internal checking only: find mean rt_slope
mean_svl_rt_slope <- mean (slv$rt_slope)
# TEST: find mean rt_slope
mean_svl_rt_slope <- mean (svl$rt_slope)
# It should be negative
mean_svl_rt_slope
# ******************** CONDITION 8: STRUCTURED VV *******************
# Separate structured and structured conditions
structured_vv <- vv_data_frame[ which(vv_data_frame$condition== "S"),]
# Identify the rows when this condition's target was presented
structured_vv_targets <- structured_vv[which(structured_vv$first_targ==structured_vv$image),]
# TEST: Create a data frame to check the number of lines per participant
list_part_id <- unique(structured_vv_targets$part_id)
part_id <- NULL
total_lines <- NULL
for(id in list_part_id){
part_id <- append(part_id, id)
total_lines <- append(total_lines, nrow(structured_vv_targets[which(structured_vv$part_id==id),]))
}
svv_line_number <- data.frame(part_id, total_lines)
# There should be 22 entries
length(svv_line_number$part_id)
# They should all contain 288 lines
svv_line_number$total_lines
# Identify response times to target stimuli. Include times when participant responded while target was displayed, or during preceding/ fovvowing stimulus ---------------------------------------------
# Set up variables to loop through participants by trials and track the target
rt_col <- NULL
target_rt <- NULL
preceding_rt <- NULL
id <- NULL
trial <-NULL
this_id <- NULL
this_trial_num <- NULL
this_loop <- NULL
loop <- NULL
preceding_loop <- NULL
loop_before <- NULL
this_targ_rt <- NULL
rt_before <- NULL
case <- NULL
this_trial_before <- NULL
this_trial_num_before <- NULL
trial_before_df <- NULL
trial_num_before <- NULL
# Isolate participants' response times.
# Include rows when the participant responded to the stimulus preceding the target (i.e. any time that the participant pressed the button within one stimulus before the target)
for(i in 1:nrow(structured_vv_targets))
{
# Isolate the ID number
this_id <- structured_vv_targets[i,]$part_id
id <- append(id, paste(this_id))
# Isolate the trial number
this_trial_num <- structured_vv_targets[i,]$trial_num
trial <- append(trial, paste(this_trial_num))
# Isolate the target's rt
this_targ_rt <- structured_vv_targets[i,]$v_block_trial_key_resp.rt
target_rt <- append(target_rt, paste(this_targ_rt))
# Isolate the loop value
this_loop <- structured_vv_targets[i,]$v_block_trials.thistrialn
loop <- append (loop, this_loop)
# Isolate the row with the preceding trial for that participant
this_trial_before <- structured_vv[which(structured_vv$trial_num==this_trial_num-1 & structured_vv$part_id==this_id), ][1,]
trial_before_df <- rbind (this_trial_before, this_trial_before)
this_trial_num_before <- this_trial_before$trial_num
trial_num_before <- append (trial_num_before, this_trial_num_before)
# Isolate the preceding row's this_l_loop value.
preceding_loop <- this_trial_before$v_block_trials.thistrialn
loop_before <- append(loop_before, preceding_loop)
#loop_after <- append (loop_after, fovvowing_loop)
preceding_rt <- this_trial_before$v_block_trial_key_resp.rt
rt_before <- append (rt_before, preceding_rt)
# If the participant responded while the target was presented
if (!is.na(structured_vv_targets[i,] [,"v_block_trial_key_resp.rt"])){
# Count their response time from the target stimulus
rt_col <- append (rt_col, structured_vv_targets[i,][,"v_block_trial_key_resp.rt"])
}
# If the participant responded during the stimulus preceding the target (implies that we are not in the first row, which would not have a preceding row)
else if (!is.na(this_trial_before["v_block_trial_key_resp.rt"])){
# And the preceding line is from the same block
if (preceding_loop==this_loop-1){
# Take the rt from the preceding line and subtract it from 0, to determine how far in advance they responded
rt_col <- append (rt_col, 0-(1000-preceding_rt))
case <- append (case, "case 2")}
else {
# Copy the target response time of NA
rt_col <- append (rt_col, this_targ_rt)
case <- append (case, "case 3")}
}
# If the participant did not respond within 1 stimulus preceding the target,
else if (is.na(structured_vv_targets[i,] [,"v_block_trial_key_resp.rt"])){
# Copy their response time of NA
rt_col <- append (rt_col, this_targ_rt)
case <- append (case, "case 4")}
else{
rt_col <- append (rt_col, "anomaly, this shouldn't happen")
case <- append (case, "case 5")}
}
# Match id and response times
structured_vv_extracted <- data.frame(id, trial, trial_num_before, loop, loop_before, target_rt, rt_before, rt_col)
# Reindex the trial numbers for only trials with response times -----------------------------------------------------------------------------------------------------
# List unique participant IDs for this condition
extracted_part_id <- unique(structured_vv_extracted$id)
# Find the number of targets shown to each participant
target_sum <- NULL
for(i in extracted_part_id){target_sum <- append(target_sum,sum(structured_vv_extracted$id==i))}
# TEST: This should be equal to 22
length (target_sum)
# TEST: This should contain a vector full of 24s
target_sum
# For each participant, index the targets
targ_index <- NULL
for (i in target_sum) {targ_index <- append (targ_index, rep(1:i, 1))}
# Add the targets' indices
structured_vv_extracted$targ_index <- targ_index
# Remove any values of NA
structured_vv_extracted <- structured_vv_extracted[!is.na(structured_vv_extracted$rt_col),]
#TO DO: Where are 10's response times? In any case, here we remove participants with no rts at all
# List unique participant IDs for this condition
extracted_part_id <- unique(structured_vv_extracted$id)
# Calculate mean rt and rt_slope  -----------------------------------------------------------------------------------------------------
# Define variables
mean_rt <- NULL
rt_slope <- NULL
part_id <- NULL
type <- NULL
task<- NULL
same_or_diff <- NULL
test_phase <- NULL
svv<- NULL
domain <- NULL
range <- NULL
upper_bound <- NULL
lower_bound <- NULL
this_range <- NULL
# For each participant, extract id
# Assign domain and type
# Calculate and record mean_rt, rt_slope, upper bound, and lower bound
for(id in extracted_part_id){
part_id <- append(part_id, id)
domain <- append(domain, "linguistic")
task <- append(task, "vv")
type <- append (type, "structured")
same_or_diff <- append (same_or_diff, "same")
test_phase <- append (test_phase, "vsl")
mean_rt <- append(mean_rt, round(mean(structured_vv_extracted$rt_col[structured_vv_extracted$id==id]),digits=3))
rt_slope <- append (rt_slope, round(summary(lm(structured_vv_extracted$rt_col[structured_vv_extracted$id==id]~structured_vv_extracted$targ_index[structured_vv_extracted$id==id]))$coefficient[2,1],digits = 4))
data_this_id <- (structured_vv_extracted[ which(structured_vv_extracted$id==id),])
this_range<- range(data_this_id$rt_col, na.rm = TRUE)
range <- append (range, (this_range[2]-this_range[1]))
upper_bound <- append (upper_bound,this_range[1])
lower_bound <- append (lower_bound,this_range[2])
}
# Combine data for each participant
svv <- data.frame(part_id, task, same_or_diff, test_phase, domain,type,mean_rt, range, upper_bound, lower_bound, rt_slope)
# TEST: find mean rt_slope
mean_svv_rt_slope <- mean (svv$rt_slope)
# It should be negative
mean_svv_rt_slope
# Bind conditions together--------------------------------------------------------------------------------------------------------------------------------------------------
# Bind conditions
indiv_rt_slope<- data.frame(rbind(rll, rlv, rvl, rvv, sll, slv, svl, svv))
# Summarize rt_slope
indiv_rt_slope_wide <- cast(indiv_rt_slope, part_id ~ task, mean, value = 'rt_slope')
indiv_rt_slope_wide<- merge(indiv_rt_slope_wide, picture_vocab, by = "part_id", all=TRUE)
indiv_rt_slope_wide <- cbind(indiv_rt_slope_wide, "same_or_diff")
colnames(indiv_rt_slope_wide)[9] <- "same_or_diff"
all_same <- indiv_rt_slope_wide[ which(indiv_rt_slope_wide$ll>0), ]
all_same$same_or_diff <- ("same")
all_diff <- indiv_rt_slope_wide[ which(indiv_rt_slope_wide$lv>0), ]
all_diff$same_or_diff <- ("different")
indiv_rt_slope_wide <- rbind(all_same, all_diff)
# Write rt_slope summary into a file
write.csv(indiv_rt_slope_wide, "sit_rt_slope_indiv.csv")
# Summarize mean_rt
indiv_rt_wide <- cast(indiv_rt_slope, part_id ~ task, mean, value = 'mean_rt')
indiv_rt_wide<- merge(indiv_rt_wide, picture_vocab, by = "part_id", all=TRUE)
indiv_rt_wide <- cbind(indiv_rt_wide, "same_or_diff")
colnames(indiv_rt_wide)[9] <- "same_or_diff"
all_same <- indiv_rt_wide[ which(indiv_rt_wide$ll>0), ]
all_same$same_or_diff <- ("same")
all_diff <- indiv_rt_wide[ which(indiv_rt_wide$lv>0), ]
all_diff$same_or_diff <- ("different")
indiv_rt_wide <- rbind(all_same, all_diff)
# Write mean_rt summary into a file
write.csv(indiv_rt_wide, "sit_mean_rt_indiv.csv")
# Find group-level mean rt_slope accross tasks------------------------------------------------------------------------------------
group_rt_slope <- NULL
mean_struct_rt_slope <- NULL
mean_rand_rt_slope <- NULL
task <- NULL
mean_struct_rt <- NULL
mean_rand_rt <- NULL
# Find mean ll rt slope across participants
task <- append (task, paste ("ll"))
mean_struct_rt_slope <- append(mean_struct_rt_slope, round(mean(indiv_rt_slope[ which(indiv_rt_slope$type=="structured"
& indiv_rt_slope$task== "ll"), ]$rt_slope), digits =3))
mean_rand_rt_slope <- append(mean_rand_rt_slope, round(mean(indiv_rt_slope[ which(indiv_rt_slope$type=="random"
& indiv_rt_slope$task== "ll"), ]$rt_slope), digits =3))
mean_struct_rt <- append(mean_struct_rt, round(mean(indiv_rt_slope[ which(indiv_rt_slope$type=="structured"
& indiv_rt_slope$task== "ll"), ]$mean_rt), digits =3))
mean_rand_rt <- append(mean_rand_rt, round(mean(indiv_rt_slope[ which(indiv_rt_slope$type=="random"
& indiv_rt_slope$task== "ll"), ]$mean_rt), digits =3))
# Find mean lv rt slope across participants
task <- append (task, paste ("lv"))
mean_struct_rt_slope <- append(mean_struct_rt_slope, round(mean(indiv_rt_slope[ which(indiv_rt_slope$type=="structured"
& indiv_rt_slope$task== "lv"), ]$rt_slope), digits =3))
mean_rand_rt_slope <- append(mean_rand_rt_slope, round(mean(indiv_rt_slope[ which(indiv_rt_slope$type=="random"
& indiv_rt_slope$task== "lv"), ]$rt_slope), digits =3))
mean_struct_rt <- append(mean_struct_rt, round(mean(indiv_rt_slope[ which(indiv_rt_slope$type=="structured"
& indiv_rt_slope$task== "lv"), ]$mean_rt), digits =3))
mean_rand_rt <- append(mean_rand_rt, round(mean(indiv_rt_slope[ which(indiv_rt_slope$type=="random"
& indiv_rt_slope$task== "lv"), ]$mean_rt), digits =3))
# Find mean vl rt slope across participants
task <- append (task, paste ("vl"))
mean_struct_rt_slope <- append(mean_struct_rt_slope, round(mean(indiv_rt_slope[ which(indiv_rt_slope$type=="structured"
& indiv_rt_slope$task== "vl"), ]$rt_slope), digits =3))
mean_rand_rt_slope <- append(mean_rand_rt_slope, round(mean(indiv_rt_slope[ which(indiv_rt_slope$type=="random"
& indiv_rt_slope$task== "vl"), ]$rt_slope), digits =3))
mean_struct_rt <- append(mean_struct_rt, round(mean(indiv_rt_slope[ which(indiv_rt_slope$type=="structured"
& indiv_rt_slope$task== "vl"), ]$mean_rt), digits =3))
mean_rand_rt <- append(mean_rand_rt, round(mean(indiv_rt_slope[ which(indiv_rt_slope$type=="random"
& indiv_rt_slope$task== "vl"), ]$mean_rt), digits =3))
# Find mean vv rt slope across participants
task <- append (task, paste ("vv"))
mean_struct_rt_slope <- append(mean_struct_rt_slope, round(mean(indiv_rt_slope[ which(indiv_rt_slope$type=="structured"
& indiv_rt_slope$task== "vv"), ]$rt_slope), digits =3))
mean_rand_rt_slope <- append(mean_rand_rt_slope, round(mean(indiv_rt_slope[ which(indiv_rt_slope$type=="random"
& indiv_rt_slope$task== "vv"), ]$rt_slope), digits =3))
mean_struct_rt <- append(mean_struct_rt, round(mean(indiv_rt_slope[ which(indiv_rt_slope$type=="structured"
& indiv_rt_slope$task== "vv"), ]$mean_rt), digits =3))
mean_rand_rt <- append(mean_rand_rt, round(mean(indiv_rt_slope[ which(indiv_rt_slope$type=="random"
& indiv_rt_slope$task== "vv"), ]$mean_rt), digits =3))
# Combine group accuracies into one data frame
group_rt_slope <- data.frame(cbind(task, mean_rand_rt_slope, mean_struct_rt_slope, mean_struct_rt, mean_rand_rt))
# Write rt slope data into a file
write.csv(group_rt_slope, "sit_rt_slope_group.csv")
# *************************** ANALYSIS 1: TEST EFFECTS OF GROUP, TYPE, AND TEST PHASE *******************
# ANOVA to test effects of type (random/ structured), test phase and group (same/ different) on RT Slope----------------------
# TEST: Make sure that all cells show 1
cast(indiv_rt_slope,part_id~test_phase+type,value="rt_slope",length)
# They don't, because sit_a_010 is missing vv data. Remove this participant.
indiv_rt_slope <- indiv_rt_slope[which(indiv_rt_slope$part_id!="sit_a_010"),]
# TEST: Make sure that all cells show 1 now that we have removed this participant
cast(indiv_rt_slope,part_id~test_phase+type,value="rt_slope",length)
# Now they do
# Test the effects of test phase, type, and group
m2 = aov(rt_slope~test_phase*same_or_diff*type+Error(part_id/(test_phase*type)), data = indiv_rt_slope)
summary(m2)
save.image("~/Documents/qlab/analysis/sit-beh-analysis/sit_rt_slope.Rdata")
View(indiv_rt_slope)
